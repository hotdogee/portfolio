---
import { Image } from '@unpic/astro'
import { getRelativeLocaleUrl } from 'astro:i18n'
import { Menu, Search, X } from 'lucide-react'
import { cn } from '@/lib/utils'
import profile from '@assets/profile.jpg'
import { Button } from '@components/ui/button'
import { Link } from '@components/ui/link'
import { defaultLocale, separateLocaleFromPathname, useTranslations } from '@lib/i18n'
import { navLinks } from '@lib/nav'
import LanguageSwitcher from './LanguageSwitcher.astro'
import ThemeToggle from './ThemeToggle.astro'

const { locale } = Astro.params
const currentLocale = locale ?? defaultLocale
const t = useTranslations(locale)

interface Props {
  showCta?: boolean
}
const { showCta = false } = Astro.props as Props
const activeColors = {
  main: 'before:bg-gradient-to-r before:from-[#59ed4f] before:to-[#05b7ff] dark:before:from-[#118324] dark:before:to-[#2575fc]',
  sub: 'before:bg-gradient-to-r before:from-[#EDC84F] before:to-[#59ed4f] dark:before:from-[#BD9C09] dark:before:to-[#118324]',
  ter: 'before:bg-gradient-to-r before:from-[#ED744F] before:to-[#EDC84F] dark:before:from-[#BD5109] dark:before:to-[#BD9C09]',
}
const { pathname } = separateLocaleFromPathname(Astro.url.pathname)
---

<header
  class="bg-background/95 supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50 w-full backdrop-blur"
>
  <div class="container flex h-16 items-center justify-between border-b">
    <div class="flex items-center gap-2 transition-transform hover:scale-110">
      <a
        href={getRelativeLocaleUrl(currentLocale, undefined)}
        class:list={[
          'relative flex size-12 items-center justify-center rounded-full',
          {
            [`active before:absolute before:inset-0 before:z-[-1] before:rounded-full ${activeColors.main}`]:
              pathname === '/',
          },
        ]}
        id={`nav-0`}
        style={`vtn: nav-0;`}
      >
        <Image
          transition:persist
          src={profile}
          class="size-10 rounded-full"
          alt="Profile Picture"
          unstyled
        />
      </a>
      <a
        href={getRelativeLocaleUrl(currentLocale, undefined)}
        class="text-xl font-bold tracking-tight"
      >
        {t('name')}
      </a>
    </div>

    <!-- Desktop Navigation -->
    <nav class="hidden items-center gap-1 lg:flex">
      {
        navLinks
          .filter((link) => link.label !== null)
          .map((link, index) => (
            <a
              href={getRelativeLocaleUrl(currentLocale, link.href[0])}
              class:list={[
                'relative px-4 py-2 text-sm font-medium',
                {
                  [`active before:absolute before:inset-0 before:z-[-1] before:rounded-xl ${activeColors.main}`]:
                    link.href.includes(pathname),
                  [`active before:absolute before:inset-0 before:z-[-1] before:rounded-xl ${activeColors.sub}`]:
                    link.href.some(
                      (href) => pathname.startsWith(href + '/') && pathname.split('/').length === 3
                    ),
                  [`active before:absolute before:inset-0 before:z-[-1] before:rounded-xl ${activeColors.ter}`]:
                    link.href.some(
                      (href) => pathname.startsWith(href + '/') && pathname.split('/').length > 3
                    ),
                  'hover:text-primary': !link.href.some((href) => pathname.startsWith(href + '/')),
                },
              ]}
              id={`nav-${index + 1}`}
              style={`vtn: nav-${index + 1};`}
            >
              {t(link.label)}
            </a>
          ))
      }
    </nav>
    <div class="flex items-center gap-2">
      <Link
        href={getRelativeLocaleUrl(currentLocale, '/search')}
        variant="outline"
        size="icon"
        title="Search"
        id="search-button"
        className={cn('bg-background dark:bg-background/30 relative', {
          [`active hover:text-foreground bg-transparent before:absolute before:inset-0 before:z-[-1] before:rounded-md hover:bg-transparent dark:bg-transparent dark:hover:bg-transparent ${activeColors.main}`]:
            pathname.startsWith('/search'),
          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent':
            !pathname.startsWith('/search'),
        })}
      >
        <Search />
        <span class="sr-only">Search</span>
      </Link>
      <LanguageSwitcher />
      <ThemeToggle />
      {
        showCta && (
          <Link
            href={getRelativeLocaleUrl(currentLocale, '/contact')}
            className="hidden lg:inline-flex"
          >
            {t('button.contact')}
          </Link>
        )
      }
      <Button variant="outline" size="icon" id="menu-toggle" className="lg:hidden">
        <X className="menu-icon hidden h-5 w-5" />
        <Menu className="close-icon h-5 w-5" />
      </Button>
    </div>
  </div>
  <!-- Mobile Navigation -->
  <div id="mobile-menu" class="mobile-menu-hidden border-b lg:hidden">
    <div class="container flex flex-col space-y-4 py-4 text-center">
      {
        navLinks
          .filter((link) => link.label !== null)
          .map((link, index) => (
            <a
              href={getRelativeLocaleUrl(currentLocale, link.href[0])}
              class:list={[
                'relative py-2 text-sm font-medium',
                {
                  [`active before:absolute before:inset-0 before:z-[-1] before:rounded-xl ${activeColors.main}`]:
                    link.href.includes(pathname),
                  [`active before:absolute before:inset-0 before:z-[-1] before:rounded-xl ${activeColors.sub}`]:
                    link.href.some(
                      (href) => pathname.startsWith(href + '/') && pathname.split('/').length === 3
                    ),
                  [`active before:absolute before:inset-0 before:z-[-1] before:rounded-xl ${activeColors.ter}`]:
                    link.href.some(
                      (href) => pathname.startsWith(href + '/') && pathname.split('/').length > 3
                    ),
                  'hover:text-primary': !link.href.some((href) => pathname.startsWith(href + '/')),
                },
              ]}
              id={`nav-${index + 1}`}
              style={`vtn: nav-${index + 1};`}
            >
              {link.label}
            </a>
          ))
      }
      {
        showCta && (
          <Link href={getRelativeLocaleUrl(currentLocale, '/contact')} className="w-full">
            {t('button.contact')}
          </Link>
        )
      }
    </div>
  </div>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const menuToggle = document.getElementById('menu-toggle')
    const mobileMenu = document.getElementById('mobile-menu')
    const menuIcon = document.querySelector('.menu-icon')
    const closeIcon = document.querySelector('.close-icon')
    if (menuToggle && mobileMenu && menuIcon && closeIcon) {
      menuToggle.addEventListener('click', () => {
        mobileMenu.classList.toggle('mobile-menu-hidden')
        mobileMenu.classList.toggle('mobile-menu-visible')
        menuIcon.classList.toggle('hidden')
        closeIcon.classList.toggle('hidden')
      })
      // Also close menu when clicking on mobile navigation links
      const mobileLinks = mobileMenu.querySelectorAll('a')
      mobileLinks.forEach((link) => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('mobile-menu-hidden')
          mobileMenu.classList.remove('mobile-menu-visible')
          menuIcon.classList.remove('hidden')
          closeIcon.classList.add('hidden')
        })
      })
    }
  })
</script>

<style is:inline>
  /* Mobile menu transitions */
  .mobile-menu-hidden {
    opacity: 0;
    max-height: 0;
    overflow: hidden;
    transition:
      opacity 0.3s ease-in-out,
      max-height 0.3s ease-in-out;
  }

  .mobile-menu-visible {
    opacity: 1;
    max-height: 500px;
    transition:
      opacity 0.3s ease-in-out,
      max-height 0.3s ease-in-out;
  }

  @layer nav {
    a {
      view-transition-class: nav-item;
    }

    a.active.transitioning::before {
      view-transition-name: active-nav;
    }

    ::view-transition-old(active-nav),
    ::view-transition-new(active-nav) {
      height: 100%;
    }

    ::view-transition-group(.nav-item) {
      z-index: 1;
    }

    ::view-transition-group(active-nav) {
      animation-duration: 0.375s;
    }

    ::view-transition-group(root) {
      pointer-events: none;
    }

    ::view-transition-group(nav-0) {
      z-index: 1;
    }
    ::view-transition-group(nav-1) {
      z-index: 1;
    }
    ::view-transition-group(nav-2) {
      z-index: 1;
    }
    ::view-transition-group(nav-3) {
      z-index: 1;
    }
    ::view-transition-group(nav-4) {
      z-index: 1;
    }
    ::view-transition-group(nav-5) {
      z-index: 1;
    }
    ::view-transition-group(nav-6) {
      z-index: 1;
    }
    ::view-transition-group(nav-7) {
      z-index: 1;
    }
    ::view-transition-group(nav-8) {
      z-index: 1;
    }
    ::view-transition-group(nav-9) {
      z-index: 1;
    }
  }
</style>
