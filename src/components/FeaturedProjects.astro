---
import { Link } from '@components/ui/link'
import { getRelativeLocaleUrl } from 'astro:i18n'
import { BrainCircuit, Grid3x3 } from 'lucide-react'
import { defaultLocale, datesFromChanges, getLocaleSlugFromId } from '@lib/utils'
import { getCollection, type CollectionEntry } from 'astro:content'
import ProjectCard from '@components/ProjectCard.astro'

const translations = {
  en: {
    titleBadge: 'Impactful Engineering',
    title: 'The Interdisciplinary Edge',
    subtitle:
      "My fascination lies at the intersection where disciplines converge. With a deep understanding of fundamental physics, complex biological systems, and the intricacies of hardware and software, I architect and build full-stack solutions that tackle previously intractable problems. If you're looking for a partner to push boundaries, you've come to the right place.",
    noProjectsFound: 'No projects found for this language.',
    viewAllProjects: 'All Projects',
  },
  tw: {
    titleBadge: '創新實踐',
    title: '跨領域優勢',
    subtitle:
      '我的熱情在於跨領域的交匯點。憑藉對基礎物理學、分子生物系統以及軟硬體整合設計的深刻理解，我擅長規劃並建構解決棘手問題的全端解決方案。如果您正在尋找一位能共同突破界限的夥伴，那麼您來對地方了。',
    noProjectsFound: '目前沒有此語言的專案。',
    viewAllProjects: '所有專案',
  },
}
const { locale } = Astro.params
const currentLocale = (locale || defaultLocale) as keyof typeof translations
const t = (key: keyof (typeof translations)[typeof currentLocale]) => {
  return translations[currentLocale]?.[key] || translations['en']?.[key]
}

// Fetch all projects and filter by current locale
const projects = (
  await getCollection('projects', ({ id }) => {
    const { locale } = getLocaleSlugFromId(id)
    return locale === currentLocale
  })
).sort((a, b) => {
  // those with featured label should be on top
  const featuredA = a.data.featured || 0
  const featuredB = b.data.featured || 0
  const dateA = datesFromChanges(a.data.changes).published || new Date(0)
  const dateB = datesFromChanges(b.data.changes).published || new Date(0)
  return featuredB - featuredA || dateA.getTime() - dateB.getTime()
})
---

<section class="py-8 md:py-12">
  <div class="container px-4 md:px-6">
    <div class="flex flex-col items-center justify-center space-y-4 text-center">
      <div class="animate-fade-in-up space-y-4">
        <div
          class="dark:bg-accent dark:text-accent-foreground bg-accent text-accent-foreground inline-flex items-center rounded-lg px-3 py-1 text-sm font-medium"
        >
          {t('titleBadge')}
        </div>
        <h2 class="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
          {t('title')}
        </h2>
        <p class="text-muted-foreground md:text-xl/relaxed">
          {t('subtitle')}
        </p>
      </div>
    </div>
    {
      projects.length > 0 ? (
        <div class="mt-8 grid gap-6 lg:grid-cols-2 xl:grid-cols-3">
          {projects.map((project: CollectionEntry<'projects'>, index: number) => (
            <ProjectCard project={project} index={index} />
          ))}
        </div>
      ) : (
        <p class="text-muted-foreground text-center">{t('noProjectsFound')}</p>
      )
    }
    <div class="mt-8 flex justify-center">
      <Link
        href={getRelativeLocaleUrl(currentLocale, '/projects')}
        variant={'outline'}
        className="flex items-center"
      >
        <BrainCircuit className="mr-1 size-5" />
        {t('viewAllProjects')}
      </Link>
    </div>
  </div>
</section>

<style></style>
