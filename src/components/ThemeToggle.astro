---
import { Button } from '@components/ui/button'
import { Sun, Moon } from 'lucide-react'
---

<Button
  variant="outline"
  size="icon"
  id="themeToggleAstro"
  title="Toggle theme"
  className="cursor-pointer"
>
  <Sun className="scale-100 rotate-0 transition-all duration-1000 dark:scale-0 dark:rotate-90" />
  <Moon
    className="absolute scale-0 rotate-90 transition-all duration-1000 dark:scale-100 dark:rotate-0"
  />
  <span class="sr-only">Toggle theme</span>
</Button>

<script is:inline>
  //  is:inline makes sure there is no flash of unstyled content (FOUC) on refresh
  const storeTheme = (theme) => {
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('theme', theme)
    }
  }
  const toggleTheme = () => {
    const isDark = document.documentElement.classList.toggle('dark')
    storeTheme(isDark ? 'dark' : 'light')
  }
  const isDark = () => {
    return document.documentElement.classList.contains('dark')
  }
  const applyTheme = (theme, doc = document) => {
    if (theme === 'light') {
      doc.documentElement.classList.remove('dark')
    } else {
      doc.documentElement.classList.add('dark')
    }
  }
  const getCurrentTheme = () => {
    let preferredTheme = 'light' // Default theme

    // 1. Check localStorage
    if (typeof localStorage !== 'undefined') {
      const storedTheme = localStorage.getItem('theme')
      if (storedTheme === 'light' || storedTheme === 'dark') {
        return storedTheme
      }
    }

    // 2. Check prefers-color-scheme
    if (
      typeof window !== 'undefined' &&
      window.matchMedia &&
      window.matchMedia('(prefers-color-scheme: dark)').matches
    ) {
      preferredTheme = 'dark'
    }

    return preferredTheme
  }
  // document.addEventListener('astro:after-swap', () => {
  //   // Apply the theme to the document
  //   applyTheme(getCurrentTheme())
  // })
  // this makes sure there is no flash of unstyled content (FOUC) on page switch
  document.addEventListener('astro:before-swap', (event) => {
    applyTheme(getCurrentTheme(), event.newDocument)
  })
  // Initialize theme on page load
  applyTheme(getCurrentTheme())
  // Listen for changes in system color scheme
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!('theme' in localStorage)) {
      const preferredTheme = e.matches ? 'dark' : 'light'
      applyTheme(preferredTheme)
    }
  })
  document.addEventListener('astro:page-load', () => {
    const themeToggleBtn = document.getElementById('themeToggleAstro')
    if (themeToggleBtn) {
      // Handle toggle click
      const handleToggleClick = (event) => {
        const shouldAnimate =
          'startViewTransition' in document &&
          !window.matchMedia('(prefers-reduced-motion: reduce)').matches
        if (!shouldAnimate) {
          console.warn('View transitions are not supported in this browser.')
          toggleTheme()
          return
        }
        const x = event.clientX
        const y = event.clientY
        const endRadius = Math.hypot(Math.max(x, innerWidth - x), Math.max(y, innerHeight - y))
        const transition = document.startViewTransition(async () => {
          toggleTheme()
        })
        transition.ready.then(() => {
          const clipPath = [
            `circle(0px at ${x}px ${y}px)`,
            `circle(${endRadius}px at ${x}px ${y}px)`,
          ]
          document.documentElement.animate(
            {
              clipPath: isDark() ? [...clipPath].reverse() : clipPath,
            },
            {
              duration: 400,
              // easing: isDark() ? 'cubic-bezier(0.16, 1, 0.3, 1)' : 'cubic-bezier(0.7, 0, 0.84, 0)',
              // easing: isDark()
              //   ? 'cubic-bezier(0.22, 1, 0.36, 1)'
              //   : 'cubic-bezier(0.64, 0, 0.78, 0)',
              easing: isDark()
                ? 'cubic-bezier(0, 1.134, 1, 0.619)'
                : 'cubic-bezier(0, 0.381, 1, -0.134)',
              pseudoElement: isDark()
                ? '::view-transition-old(root)'
                : '::view-transition-new(root)',
            }
          )
        })
      }
      themeToggleBtn.addEventListener('click', handleToggleClick)
    } else {
      console.error("Theme toggle button with id 'themeToggleAstro' not found.")
    }
  })
</script>

<style is:global>
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }
  ::view-transition-old(root) {
    z-index: 1;
  }
  ::view-transition-new(root) {
    z-index: 10;
  }
  .dark::view-transition-old(root) {
    z-index: 10;
  }
  .dark::view-transition-new(root) {
    z-index: 1;
  }
</style>
