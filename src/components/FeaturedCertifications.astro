---
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import { getRelativeLocaleUrl } from 'astro:i18n'
import { Award, Grid3x3, ShieldCheck } from 'lucide-react'
import organizations from '@/certifications/organizations.json'
import { cn } from '@/lib/utils'
import CertificationCard from '@components/CertificationCard.astro'
import CertificationOrganizationsFilter from '@components/CertificationOrganizationsFilter.astro'
import { Link } from '@components/ui/link'
import { brands } from '@lib/data'
import { datesFromChanges, defaultLocale, getLocaleSlugFromId, slugify } from '@lib/i18n'

const translations = {
  en: {
    titleBadge: 'Validated Expertise',
    title: 'Mastery Across the Stack',
    subtitle:
      'To deliver cutting-edge, secure, and scalable solutions, I maintain an extensive portfolio of elite certifications from Google Cloud, Microsoft Azure, and AWS. These credentials highlight my proven expertise in AI, cloud architecture, and cybersecurity, ensuring your projects are built on a foundation of validated skills.',
    noCertificationsFound: 'No certifications found for this language.',
    viewAllCertifications: 'All Certifications',
  },
  tw: {
    titleBadge: '信賴基石',
    title: '國際認可的專業實力',
    subtitle:
      '為打造頂尖、安全且具高度擴展性的解決方案，我持有多張來自 Google Cloud、Microsoft Azure 及 AWS 等業界龍頭的國際專業認證。這些證書印證了我在 AI 人工智慧、雲端架構和網路資安領域的專業技術，確保您的每一項專案，均能穩固奠基於經過嚴格驗證的純熟技能之上。',
    noCertificationsFound: '目前沒有此語言的認證。',
    viewAllCertifications: '所有國際認證',
  },
}
const { locale } = Astro.params
const currentLocale = (locale || defaultLocale) as keyof typeof translations
const t = (key: keyof (typeof translations)[typeof currentLocale]) => {
  return translations[currentLocale]?.[key] || translations['en']?.[key]
}

// Fetch all certifications, sort them, and limit to 6 featured ones
const certifications = (await getCollection('certifications'))
  .sort((a, b) => {
    // those with featured label should be on top
    const featuredA = a.data.featured || 0
    const featuredB = b.data.featured || 0
    const dateA = new Date(a.data.issue || 0)
    const dateB = new Date(b.data.issue || 0)
    return featuredB - featuredA || dateB.getTime() - dateA.getTime()
  })
  .slice(0, 6)
---

<section class="py-8 md:py-12">
  <div class="container px-4 md:px-6">
    <div class="flex flex-col items-center justify-center space-y-4 text-center">
      <div class="animate-fade-in-up space-y-4">
        <div
          class="dark:bg-accent dark:text-accent-foreground bg-accent text-accent-foreground inline-flex items-center rounded-lg px-3 py-1 text-sm font-medium"
        >
          {t('titleBadge')}
        </div>
        <h2 class="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
          {t('title')}
        </h2>
        <p class="text-muted-foreground md:text-xl/relaxed">
          {t('subtitle')}
        </p>
      </div>
    </div>
    {
      certifications.length > 0 ? (
        <div class="mt-8 grid grid-cols-2 gap-6 md:grid-cols-3 xl:grid-cols-6">
          {certifications.map((certification: CollectionEntry<'certifications'>, index: number) => (
            <CertificationCard certification={certification} index={index} />
          ))}
        </div>
      ) : (
        <p class="text-muted-foreground text-center">{t('noCertificationsFound')}</p>
      )
    }
    <div class="mt-8 flex flex-wrap justify-center gap-2">
      <Link
        href={getRelativeLocaleUrl(currentLocale, '/certifications')}
        variant={'outline'}
        className="flex h-11 items-center"
      >
        <Award className="size-6" />
        {t('viewAllCertifications')}
      </Link>
      <CertificationOrganizationsFilter orgs={brands} size="lg" />
    </div>
  </div>
</section>

<style></style>
