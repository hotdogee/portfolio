---
import { Globe } from 'lucide-react'
import TW from '@assets/icons/tw.svg'
import US from '@assets/icons/us.svg'
import { Button } from '@components/ui/button'
import { defaultLocale, LOCALE_COOKIE, locales } from '@lib/i18n'

const { locale } = Astro.params
const currentLocale = locale ?? defaultLocale
// console.log('Current locale:', Astro.url.pathname.split('/'), locale, currentLocale)
---

<div class="dropdown relative">
  <Button
    id="language-toggle"
    variant="outline"
    size="icon"
    aria-label="Toggle language"
    aria-haspopup="true"
  >
    <Globe />
    <span class="sr-only">Toggle language</span>
  </Button>
  <div
    id="dropdown-content"
    class="dropdown-content bg-background/95 absolute right-0 mt-2 hidden w-36 rounded-md border p-1 shadow-lg backdrop-blur-sm"
  >
    <div class="flex flex-col gap-2">
      <button
        type="button"
        data-lang="en"
        class={`cursor-pointer flex w-full items-center rounded-sm px-3 py-2 text-sm transition-colors ${currentLocale === 'en' ? 'bg-card dark:bg-card ring-accent ring-2' : 'hover:bg-accent/50'}`}
      >
        <US class="mr-2 size-6" /> English
      </button>
      <button
        type="button"
        data-lang="tw"
        class={`cursor-pointer flex w-full items-center rounded-sm px-3 py-2 text-sm transition-colors ${currentLocale === 'tw' ? 'bg-card dark:bg-card ring-accent ring-2' : 'hover:bg-accent/50'}`}
      >
        <TW class="mr-2 size-6" /> 正體中文
      </button>
    </div>
  </div>
</div>

<script define:vars={{ currentLocale, defaultLocale, LOCALE_COOKIE }}>
  document.addEventListener('astro:page-load', () => {
    // Toggle dropdown visibility
    const toggleButton = document.getElementById('language-toggle')
    const dropdownContent = document.getElementById('dropdown-content')

    if (toggleButton && dropdownContent) {
      // Function to open dropdown
      const openDropdown = () => {
        dropdownContent.classList.remove('hidden')
        // Set focus to the first language button when dropdown opens
        setTimeout(() => {
          const firstButton = dropdownContent.querySelector('button')
          if (firstButton) firstButton.focus()
        }, 10)
      }

      // Function to close dropdown
      const closeDropdown = () => {
        dropdownContent.classList.add('hidden')
        // Return focus to toggle button
        toggleButton.focus()
      }

      // Toggle dropdown when clicking the button
      toggleButton.addEventListener('click', (e) => {
        e.stopPropagation()
        if (dropdownContent.classList.contains('hidden')) {
          openDropdown()
        } else {
          closeDropdown()
        }
      })

      // Close dropdown when clicking elsewhere
      document.addEventListener('click', () => {
        if (!dropdownContent.classList.contains('hidden')) {
          closeDropdown()
        }
      })

      // Prevent dropdown from closing when clicking inside it
      dropdownContent.addEventListener('click', (e) => {
        e.stopPropagation()
      })

      // Close dropdown with Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !dropdownContent.classList.contains('hidden')) {
          closeDropdown()
        }
      })

      // Handle language selection
      const languageButtons = document.querySelectorAll('[data-lang]')
      languageButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          const selectedLocale = e.currentTarget.dataset.lang
          if (selectedLocale === currentLocale) {
            // If current language is selected, just close the dropdown
            closeDropdown()
            return
          }

          const pathnameWithoutLocale = window.location.pathname.replace(`/${currentLocale}`, '')
          const pathnameWithNewLocale =
            selectedLocale === defaultLocale
              ? pathnameWithoutLocale || '/'
              : `/${selectedLocale}${pathnameWithoutLocale === '/' ? '' : pathnameWithoutLocale}`

          document.cookie = `${LOCALE_COOKIE}=${selectedLocale};path=/;max-age=31536000;samesite=strict;`
          window.location.pathname = pathnameWithNewLocale
        })
      })
    }
  })
</script>

<style>
  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-content {
    z-index: 50;
    min-width: 160px;
    transform-origin: top right;
    opacity: 0;
    transform: scale(0.95);
    transition:
      opacity 0.2s ease,
      transform 0.2s ease;
  }

  .dropdown-content:not(.hidden) {
    opacity: 1;
    transform: scale(1);
  }

  /* Font for emoji flags */
  button[data-lang] {
    transition: background-color 0.2s ease;
  }

  button[data-lang]:hover {
    background-color: var(--accent);
  }
</style>
