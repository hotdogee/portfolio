---
import type { CollectionEntry } from 'astro:content'
import { Icon } from 'astro-icon/components'
// import { Image } from '@unpic/astro'
import { Image } from 'astro:assets'
import { getRelativeLocaleUrl } from 'astro:i18n'
import { ArrowRight } from 'lucide-react'
import CategoryBadge from '@components/CategoryBadge.astro'
import { Badge } from '@components/ui/badge'
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@components/ui/card'
import { Link } from '@components/ui/link'
import { defaultLocale, getLocaleSlugFromId } from '@lib/i18n'
import TechBadge from './TechBadge.astro'

// make sure tailwind class names are statically detectable at build-time
const colorVariants = {
  amber: 'dark:bg-amber-900/20 dark:text-amber-400 bg-amber-100 text-amber-600',
  green: 'dark:bg-green-900/20 dark:text-green-400 bg-green-100 text-green-600',
  blue: 'dark:bg-blue-900/20 dark:text-blue-400 bg-blue-100 text-blue-600',
  primary: 'bg-primary text-primary',
}
interface Props {
  project: CollectionEntry<'projects'>
  index?: number
}
const { project, index = 0 } = Astro.props as Props
const { id, data } = project
const { slug } = getLocaleSlugFromId(id)
const {
  // slug,
  icon,
  tagline,
  title,
  subtitle,
  description,
  categories,
  image,
  tech = [],
  links = [],
  cards = [],
} = data
const color = (data.color || 'primary') as keyof typeof colorVariants

const translations = {
  en: {
    projectScreenshot: 'Project Screenshot',
    viewDetails: 'View Details',
    iconAlt: `${title} Icon`,
  },
  tw: {
    projectScreenshot: '專案截圖',
    viewDetails: '查看詳情',
    iconAlt: `${title} 圖示`,
  },
}
const { locale } = Astro.params
const currentLocale = (locale || defaultLocale) as keyof typeof translations
const t = (key: keyof (typeof translations)[typeof currentLocale]) => {
  return translations[currentLocale]?.[key] || translations['en']?.[key]
}
const projectUrl = getRelativeLocaleUrl(currentLocale, `/projects/${slug}`)
// console.log('data.image', typeof data.icon.src)
---

<div
  id={`projects-${slug}`}
  class:list={['opacity-0']}
  style={`animation: fade-in-up 0.3s ease-in ${(0.1 * (index + 1)).toFixed(1)}s forwards;`}
>
  <Card className={`flex h-full flex-col gap-5`}>
    <CardHeader>
      <div class="flex justify-center">
        <div
          class:list={[
            colorVariants[color],
            `w-fit items-center rounded-lg px-3 py-1 text-base font-medium`,
          ]}
        >
          {tagline}
        </div>
      </div>
      <div class="mt-2 flex flex-col items-start justify-start gap-1">
        {
          categories && (
            <div
              id={`categories-${slug}`}
              class="mb-2 ml-14 flex flex-wrap items-center justify-start gap-2"
            >
              {categories.slice(0, 3).map((category) => (
                <CategoryBadge
                  type="projects"
                  category={category}
                  className="bg-accent text-accent-foreground hover:bg-accent/80"
                />
              ))}
            </div>
          )
        }
        <a href={projectUrl} class="flex items-start justify-start gap-3">
          <div
            id={`icon-${slug}`}
            class:list={[
              colorVariants[color],
              `flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-lg`,
            ]}
          >
            {typeof icon === 'string' && <Icon name={icon} class={`h-8 w-8`} />}
            {
              typeof icon?.src === 'string' && (
                <Image
                  src={icon}
                  class={`h-8 w-8 rounded-lg object-contain`}
                  alt={t('iconAlt')}
                  unstyled
                />
              )
            }
          </div>
          <div id={`title-${slug}`} class="flex flex-col justify-center gap-1">
            <CardTitle>{title}</CardTitle>
            {subtitle && <CardDescription>{subtitle}</CardDescription>}
          </div>
        </a>
      </div>
    </CardHeader>
    <CardContent className="flex-grow">
      <p class="text-muted-foreground">{description}</p>
    </CardContent>
    <CardFooter className="flex flex-col gap-4">
      {
        tech && (
          <div class="flex flex-wrap items-center justify-center gap-2">
            {tech.slice(0, 3).map((techItem) => (
              <TechBadge type="projects" tech={techItem} />
            ))}
          </div>
        )
      }
      <a
        href={projectUrl}
        class="bg-muted flex h-40 w-full items-center justify-center overflow-hidden rounded-lg"
      >
        <Image
          id={`image-${slug}`}
          src={image?.url || '/placeholder.svg'}
          alt={image?.alt || t('projectScreenshot')}
          class="h-full w-full object-cover object-top transition-transform hover:scale-105"
        />
      </a>
      <Link href={projectUrl} className="w-full" variant={'default'}>
        {t('viewDetails')}
        <ArrowRight className="ml-2 h-4 w-4" />
      </Link>
    </CardFooter>
  </Card>
</div>

<style></style>
