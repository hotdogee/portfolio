---
import type { CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'
import { getEntries } from 'astro:content'
import { getRelativeLocaleUrl } from 'astro:i18n'
import { cn } from '@/lib/utils'
import { Link } from '@components/ui/link'
import { defaultLocale, separateLocaleFromPathname, slugify } from '@lib/i18n'

const { locale } = Astro.params
const currentLocale = locale ?? defaultLocale
const translations = {
  en: {
    allOrganizations: 'All Organizations',
  },
  tw: {
    allOrganizations: '所有機構',
  },
}
const t = (key: string) => {
  const locale = currentLocale as keyof typeof translations
  return translations[locale]?.[key as keyof (typeof translations)[typeof locale]] || key
}

interface Props {
  brands: string[]
  class?: string
  size?: 'md' | 'lg'
  icon?: boolean
  text?: boolean
  [key: string]: any
}

const { brands, class: className, size = 'md', icon = true, text = false, ...rest } = Astro.props
const orgs = (await getEntries(
  brands.map((brand: string) => {
    return { collection: 'organizations' as const, id: slugify(brand) }
  })
)) as CollectionEntry<'organizations'>[]
const { pathname } = separateLocaleFromPathname(Astro.url.pathname)
---

{
  orgs.map((orgEntry) => {
    const org = orgEntry.data
    const slug = orgEntry.id
    return (
      <Link
        href={getRelativeLocaleUrl(currentLocale, `/certifications/organization/${slug}`)}
        className={cn(className, size == 'md' ? 'h-10' : 'h-11', text ? '' : 'aspect-square', {
          'bg-card dark:bg-card ring-accent ring-2': pathname.endsWith(
            `/certifications/organization/${slug}`
          ),
        })}
        variant={'outline'}
        {...rest}
      >
        {org.icon && icon && (
          <div class:list={[text && 'mr-1', 'flex-shrink-0']}>
            <Image
              src={org.icon.light}
              alt={org.icon.alt}
              class:list={[size == 'md' ? 'size-5' : 'size-6', 'object-contain dark:hidden']}
              loading="lazy"
            />
            <Image
              src={org.icon.dark}
              alt={org.icon.alt}
              class:list={[size == 'md' ? 'size-5' : 'size-6', 'hidden object-contain dark:block']}
              loading="lazy"
            />
          </div>
        )}
        {text && org.name}
      </Link>
    )
  })
}

<style></style>
