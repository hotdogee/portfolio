---
import { getCollection } from 'astro:content'
import ProjectCard from '@components/ProjectCard.astro'
import BaseLayout from '@layouts/BaseLayout.astro'
import { datesFromChanges, defaultLocale, getLocaleSlugFromId } from '@lib/i18n'

export { getLocalizedStaticPaths as getStaticPaths } from '@lib/i18n'

const translations = {
  en: {
    title: 'Projects | Han Lin',
    pageTitleBadge: 'A Portfolio of Impact',
    pageTitle: 'Innovations in Action',
    description:
      "Welcome to my workshop of ideas made real. This portfolio highlights key projects where I've architected and built solutions at the dynamic crossroads of AI, Bioinformatics, and Electronics. Discover how complex challenges were met with innovative engineering, leading to tangible breakthroughs and powerful tools that drive research and industry forward.",
    viewDetails: 'View Details',
    projectScreenshot: 'Project Screenshot',
    noProjectsFound: 'No projects found for this language.',
    viewProjectDetailsFallback: 'View project details.',
  },
  tw: {
    title: '專案 | 林翰',
    pageTitleBadge: '跨領域實績選粹',
    pageTitle: '創新實踐',
    description:
      '歡迎蒞臨我的創新實踐工坊。本作品集聚焦我在 AI、生物資訊及電子工程的交集處，親自擘劃並構築的解決方案。探索如何運用創新工程克服艱鉅挑戰，催生具體突破，並鍛造出驅動學術研究與產業前行的強大工具。',
    viewDetails: '查看詳情',
    projectScreenshot: '專案截圖',
    noProjectsFound: '目前沒有此語言的專案。',
    viewProjectDetailsFallback: '查看專案詳情。',
  },
}
const { locale } = Astro.params
const currentLocale = (locale || defaultLocale) as keyof typeof translations
const t = (key: keyof (typeof translations)[typeof currentLocale]) => {
  return translations[currentLocale]?.[key] || translations['en']?.[key]
}

// Fetch all projects and filter by current locale
const projects = (
  await getCollection('projects', ({ id }) => {
    const { locale } = getLocaleSlugFromId(id)
    return locale === currentLocale
  })
).sort((a, b) => {
  // those with featured label should be on top
  const featuredA = a.data.featured || 0
  const featuredB = b.data.featured || 0
  const dateA = datesFromChanges(a.data.changes).published || new Date(0)
  const dateB = datesFromChanges(b.data.changes).published || new Date(0)
  return featuredB - featuredA || dateA.getTime() - dateB.getTime()
})

// This interface should match your projects collection schema in content.config.ts
interface ProjectFrontmatter {
  slug?: string
  icon?: string
  color?: string
  featured?: number
  tagline?: string
  title: string
  subtitle?: string
  description?: string
  categories?: string[]
  image?: {
    src: string
    alt: string
  }
  tech?: string[]
  links?: { text: string; href: string; icon?: string; variant?: string }[]
  cards?: any[] // Define more specific types if needed
  draft?: boolean
  changes?: Record<string, string>[]
}
---

<BaseLayout title={t('title')} description={t('description')}>
  <section class="md:py-2">
    <div class="container px-4 md:px-6">
      <div class="animate-fade-in-up mx-auto max-w-3xl transition duration-500">
        <div class="mb-8 space-y-4 text-center">
          <div
            class="dark:bg-accent dark:text-accent-foreground bg-accent text-accent-foreground inline-flex items-center rounded-lg px-3 py-1 text-sm font-medium"
          >
            {t('pageTitleBadge')}
          </div>
          <h1 class="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
            {t('pageTitle')}
          </h1>
          <p class="text-muted-foreground mb-12 md:text-xl">{t('description')}</p>
        </div>
      </div>

      {
        projects.length > 0 ? (
          <div class="grid gap-6 lg:grid-cols-2 xl:grid-cols-3">
            {projects.map((project, index) => (
              <ProjectCard project={project} index={index} />
            ))}
          </div>
        ) : (
          <p class="text-muted-foreground text-center">{t('noProjectsFound')}</p>
        )
      }
    </div>
  </section>
</BaseLayout>

<style></style>
