---
import { getCollection } from 'astro:content'
import { locales, defaultLocale, slugify, useTranslations, type Locale } from '@lib/utils'
import BaseLayout from '@layouts/BaseLayout.astro'
import BlogCard from '@components/ArticleCard.astro'
import BlogSidebar from '@components/ArticleSidebar.astro'

export async function getStaticPaths() {
  const articles = await getCollection('articles')
  if (!articles || articles.length === 0) {
    return []
  }
  const tags = [...new Set(articles.flatMap((article) => article.data.tags || []))]
  // Create paths for all locales and tags
  const paths = tags.flatMap((tag) => {
    return [undefined, ...locales].map((locale) => {
      return {
        params: {
          locale,
          tag: slugify(tag),
        },
      }
    })
  })
  return paths
}

const { locale, tag } = Astro.params
const currentLocale = (locale || defaultLocale) as Locale
const tt = useTranslations(currentLocale, 'tags')
const tagSlug = tag ? decodeURIComponent(tag) : ''

const translations = {
  en: {
    title: `#${tt(tagSlug)} | Articles | Han Lin`,
    pageTitle: `#${tt(tagSlug)}`,
    description: `Articles and insights tagged with #${tt(tagSlug)}`,
    noArticlesFound: 'No articles found with this tag.',
  },
  tw: {
    title: `#${tt(tagSlug)} | 文章 | 林翰`,
    pageTitle: `#${tt(tagSlug)}`,
    description: `標記為 #${tt(tagSlug)} 的文章和見解`,
    noArticlesFound: '此標籤沒有相關文章。',
  },
}
const t = (key: keyof (typeof translations)[typeof currentLocale]) => {
  return translations[currentLocale]?.[key] || translations['en']?.[key]
}

// Fetch articles by locale
const articles = await getCollection('articles', ({ id }) => {
  // Filter articles by language if needed
  const langPrefix = id.split('/')[0]
  return langPrefix === currentLocale
})

// Extract categories and tags for sidebar
const categories = [...new Set(articles.flatMap((article) => article.data.categories || []))].map(
  (category) => ({
    name: category,
    count: articles.filter((article) => article.data.categories?.includes(category)).length,
  })
)

const tags = [...new Set(articles.flatMap((article) => article.data.tags || []))].map((tag) => ({
  name: tag,
  count: articles.filter((article) => article.data.tags?.includes(tag)).length,
}))

// Filter articles by tag
const tagArticles = articles.filter(
  (article) => article.data.tags && article.data.tags.map((t) => slugify(t)).includes(tagSlug)
)
---

<BaseLayout title={t('title')} description={t('description')}>
  <section class="py-6 md:py-12">
    <div class="container px-4 md:px-6">
      <div class="animate-fade-in-up mx-auto mb-12 max-w-3xl text-center">
        <h1 class="mb-4 text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
          {t('pageTitle')}
        </h1>
        <p class="text-muted-foreground md:text-xl">
          {t('description')}
        </p>
      </div>
      <div class="grid gap-8 lg:grid-cols-3">
        <div class="lg:col-span-2">
          <div class="grid gap-6 md:grid-cols-2">
            {
              tagArticles.length > 0 ? (
                tagArticles.map((article, index) => <BlogCard article={article} index={index} />)
              ) : (
                <div class="py-12 text-center md:col-span-2">
                  <p class="text-muted-foreground">{t('noArticlesFound')}</p>
                </div>
              )
            }
          </div>
        </div>
        <div>
          <BlogSidebar categories={categories} tags={tags} />
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<style></style>
