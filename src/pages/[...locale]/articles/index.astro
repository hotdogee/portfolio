---
import { getCollection } from 'astro:content'
import BlogCard from '@components/ArticleCard.astro'
import BlogSidebar from '@components/ArticleSidebar.astro'
import BaseLayout from '@layouts/BaseLayout.astro'
import { datesFromChanges, defaultLocale } from '@lib/i18n'

export { getLocalizedStaticPaths as getStaticPaths } from '@lib/i18n'

const translations = {
  en: {
    title: 'Articles | Han Lin',
    pageTitleBadge: 'Musings on Tech, Science & Invention',
    pageTitle: 'The Curiosity Circuit',
    description:
      "My mind is always connecting dots. This space is an extension of that process, a place to delve into emerging technologies, dissect complex ideas, and share perspectives on the ever-evolving landscape of AI, bioinformatics, electronics, and the human ingenuity that drives them. Let's explore the 'why' and 'what if' together.",
    noArticlesFound: 'No articles found.',
  },
  tw: {
    title: '文章 | 林翰',
    pageTitleBadge: '漫談科技、科學與發明之道',
    pageTitle: '奇想迴路',
    description:
      '我的思緒總在不同的點子間跳躍、串連。這裡便是我思考脈絡的延伸，一個致力於鑽研新興科技、拆解複雜概念，並針對 AI、生物資訊、電子學等日新月異的領域，以及驅動這一切的人類巧思，分享個人見聞的平台。讓我們一起探究事物的「所以然」，並大膽思索「無限可能」。',
    noArticlesFound: '目前沒有文章。',
  },
}
const { locale } = Astro.params
const currentLocale = (locale || defaultLocale) as keyof typeof translations
const t = (key: keyof (typeof translations)[typeof currentLocale]) => {
  return translations[currentLocale]?.[key] || translations['en']?.[key]
}

// Fetch articles by locale
const articles = (
  await getCollection('articles', ({ id }) => {
    // Filter articles by language if needed
    const langPrefix = id.split('/')[0]
    return langPrefix === currentLocale
  })
).sort((a, b) => {
  // Sort published date
  const dateA = datesFromChanges(a.data.changes).published || new Date(0)
  const dateB = datesFromChanges(b.data.changes).published || new Date(0)
  return dateB.getTime() - dateA.getTime()
})

// Extract categories and tags for sidebar
const categories = [...new Set(articles.flatMap((post) => post.data.categories || []))].map(
  (category) => ({
    name: category,
    count: articles.filter((post) => post.data.categories?.includes(category)).length,
  })
)

const tags = [...new Set(articles.flatMap((post) => post.data.tags || []))].map((tag) => ({
  name: tag,
  count: articles.filter((post) => post.data.tags?.includes(tag)).length,
}))
---

<BaseLayout title={t('title')} description={t('description')}>
  <section class="md:py-2">
    <div class="container px-4 md:px-6">
      <div class="animate-fade-in-up mx-auto max-w-3xl transition duration-500">
        <div class="mb-8 space-y-4 text-center">
          <div
            class="dark:bg-accent dark:text-accent-foreground bg-accent text-accent-foreground inline-flex items-center rounded-lg px-3 py-1 text-sm font-medium"
          >
            {t('pageTitleBadge')}
          </div>
          <h1 class="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
            {t('pageTitle')}
          </h1>
          <p class="text-muted-foreground mb-12 md:text-xl">{t('description')}</p>
        </div>
      </div>
      <div class="grid gap-8 lg:grid-cols-3">
        <div class="lg:col-span-2">
          <div class="grid gap-6 md:grid-cols-2">
            {
              articles.length > 0 ? (
                articles.map((article, index) => <BlogCard article={article} index={index} />)
              ) : (
                <div class="py-12 text-center md:col-span-2">
                  <p class="text-muted-foreground">{t('noArticlesFound')}</p>
                </div>
              )
            }
          </div>
        </div>
        <div class="animate-fade-in-up">
          <BlogSidebar categories={categories} tags={tags} />
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<style></style>
