---
import type { Locale } from '@lib/i18n'
import type { CollectionEntry } from 'astro:content'
import { getCollection, getEntry } from 'astro:content'
import { getRelativeLocaleUrl } from 'astro:i18n'
import { cn } from '@/lib/utils'
import CertificationCard from '@components/CertificationCard.astro'
import CertificationOrganizationsFilter from '@components/CertificationOrganizationsFilter.astro'
import { Link } from '@components/ui/link'
import BaseLayout from '@layouts/BaseLayout.astro'
import {
  defaultLocale,
  locales,
  separateLocaleFromPathname,
  slugify,
  useTranslations,
} from '@lib/i18n'
import { certifications, orgs, translations as parentTranslations } from '../index.astro'

export async function getStaticPaths() {
  const certifications = await getCollection('certifications')
  if (!certifications || certifications.length === 0) {
    return []
  }
  const organizations = [
    ...new Set(certifications.map((certification) => certification.data.organization)),
  ]
  // Create paths for all locales and categories
  const paths = organizations.flatMap((organization) => {
    return [undefined, ...locales].map((locale) => {
      return {
        params: {
          locale,
          organization: slugify(organization),
        },
      }
    })
  })
  return paths
}

const { locale, organization } = Astro.params
const currentLocale = (locale || defaultLocale) as Locale
// const tc = useTranslations(currentLocale, 'categories')
const organizationSlug = organization ? decodeURIComponent(organization) : ''
const { name, icon, logo } = (
  (await getEntry('organizations', organizationSlug)) as CollectionEntry<'organizations'>
).data

const pt = (key: keyof (typeof parentTranslations)[typeof currentLocale]) => {
  return parentTranslations[currentLocale]?.[key] || parentTranslations['en']?.[key]
}
const translations = {
  en: {
    title: `${name} | ${pt('title')}`,
    pageTitleBadge: `${name} Certifications`,
    description: `Han Lin's Certifications from ${name}`,
    noCertificationsFound: 'No certifications from this organization.',
  },
  tw: {
    title: `${name} | ${pt('title')}`,
    pageTitleBadge: `${name} 認證`,
    description: `林翰的 ${name} 認證`,
    noCertificationsFound: '目前沒有來自此機構的認證。',
  },
}

const t = (key: keyof (typeof translations)[typeof currentLocale]) => {
  return translations[currentLocale]?.[key] || translations['en']?.[key]
}

// Filter certifications by organization
const organizationCertifications = certifications.filter(
  (certification) =>
    certification.data.organization && slugify(certification.data.organization) === organizationSlug
)
// other certifications that are not from this organization
// used for view transitions
const otherCertifications = certifications.filter(
  (certification) =>
    certification.data.organization && slugify(certification.data.organization) !== organizationSlug
)
const { pathname } = separateLocaleFromPathname(Astro.url.pathname)
---

<BaseLayout title={t('title')} description={t('description')}>
  <section class="md:py-2">
    <div class="container px-4 md:px-6">
      <div class="mx-auto max-w-3xl transition duration-500">
        <div class="mb-8 space-y-4 text-center">
          <div
            class="dark:bg-accent dark:text-accent-foreground bg-accent text-accent-foreground inline-flex items-center rounded-lg px-3 py-1 text-sm font-medium"
          >
            {t('pageTitleBadge')}
          </div>
          <h1 class="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
            {pt('pageTitle')}
          </h1>
          <p class="text-muted-foreground mb-12 md:text-xl">{pt('description')}</p>
        </div>
      </div>
      <div class:list={['mx-auto mb-8 space-y-6']}>
        <div class="flex flex-wrap items-center justify-center gap-2">
          <Link
            href={getRelativeLocaleUrl(currentLocale, `/certifications/`)}
            className={cn('h-10', {
              'bg-card dark:bg-card ring-accent ring-2': pathname.endsWith('/certifications'),
            })}
            variant={'outline'}
          >
            {pt('allOrganizations')}
          </Link>
          <CertificationOrganizationsFilter brands={orgs} />
        </div>
      </div>
      {
        organizationCertifications.length > 0 ? (
          <div class="grid grid-cols-3 gap-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 xl:grid-cols-7 2xl:grid-cols-8">
            {organizationCertifications.map((certification, index) => (
              <CertificationCard certification={certification} index={index} />
            ))}
            {otherCertifications.length > 0 &&
              otherCertifications.map((certification, index) => (
                <CertificationCard
                  certification={certification}
                  index={index}
                  class="hidden opacity-0"
                />
              ))}
          </div>
        ) : (
          <p class="text-muted-foreground text-center">{t('noCertificationsFound')}</p>
        )
      }
    </div>
  </section>
</BaseLayout>

<style></style>
