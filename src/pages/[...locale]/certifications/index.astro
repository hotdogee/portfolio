---
import { getCollection, type CollectionEntry } from 'astro:content'
export { getLocalizedStaticPaths as getStaticPaths } from '@lib/utils'
import { cn, datesFromChanges, defaultLocale, getLocaleSlugFromId } from '@lib/utils'
import BaseLayout from '@layouts/BaseLayout.astro'
import CertificationCard from '@components/CertificationCard.astro'
import CertificationOrganizationsFilter from '@components/CertificationOrganizationsFilter.astro'
import { Link } from '@components/ui/link'
import { getRelativeLocaleUrl } from 'astro:i18n'

export const translations = {
  en: {
    title: 'Certifications | Han Lin',
    pageTitleBadge: 'Trusted Certifications',
    pageTitle: 'Credentials of a Lifelong Learner',
    description:
      'My journey as an engineer is one of perpetual learning and refinement. These certifications are milestones in that journey, demonstrating a proactive approach to mastering new technologies and methodologies across AI, Cloud, Cybersecurity, and Data. They reflect a commitment to excellence and provide a verifiable testament to the skills I offer.',
    viewDetails: 'View Details',
    certificationScreenshot: 'Certification Screenshot',
    noCertificationsFound: 'No certifications found for this language.',
    viewCertificationDetailsFallback: 'View certification details.',
    allOrganizations: 'All Organizations',
  },
  tw: {
    title: '國際認證 | 林翰',
    pageTitleBadge: '國際認證',
    pageTitle: '信賴基石',
    description:
      '這是一條不斷學習、淬鍊精進的歷程。這些專業認證不僅是我學習途中的重要里程碑，更展現了我積極掌握並精通 AI、雲端運算、網路安全及資料科學等尖端科技與方法的決心。這一切如實反映了我對追求卓越的堅持，亦是我專業技能的堅實佐證。',
    viewDetails: '查看詳情',
    certificationScreenshot: '認證截圖',
    noCertificationsFound: '目前沒有此語言的認證。',
    viewCertificationDetailsFallback: '查看認證詳情。',
    allOrganizations: '所有機構',
  },
}
const { locale } = Astro.params
const currentLocale = (locale || defaultLocale) as keyof typeof translations
const t = (key: keyof (typeof translations)[typeof currentLocale]) => {
  return translations[currentLocale]?.[key] || translations['en']?.[key]
}

// Fetch all certifications and sort by featured status and issue date
export const certifications = (await getCollection('certifications')).sort((a, b) => {
  // those with featured label should be on top
  const featuredA = a.data.featured || 0
  const featuredB = b.data.featured || 0
  const dateA = new Date(a.data.issue || 0)
  const dateB = new Date(b.data.issue || 0)
  return featuredB - featuredA || dateB.getTime() - dateA.getTime()
})

export const orgCerts = certifications.reduce<Record<string, CollectionEntry<'certifications'>[]>>(
  (acc, certification) => {
    const { organization } = certification.data
    if (!acc[organization]) {
      acc[organization] = []
    }
    acc[organization].push(certification)
    return acc
  },
  {}
)

// Extract a list of organizations from certifications
export const orgs = Object.keys(orgCerts).sort((a, b) => {
  // sort by number of certifications, then alphabetically
  const countA = orgCerts[a].length
  const countB = orgCerts[b].length
  const orgA = a.toLowerCase()
  const orgB = b.toLowerCase()
  return countB - countA || orgA.localeCompare(orgB)
})
---

<BaseLayout title={t('title')} description={t('description')}>
  <section class="md:py-2">
    <div class="container px-4 md:px-6">
      <div class="animate-fade-in-up mx-auto max-w-3xl transition duration-500">
        <div class="mb-8 space-y-4 text-center">
          <div
            class="dark:bg-accent dark:text-accent-foreground bg-accent text-accent-foreground inline-flex items-center rounded-lg px-3 py-1 text-sm font-medium"
          >
            {t('pageTitleBadge')}
          </div>
          <h1 class="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
            {t('pageTitle')}
          </h1>
          <p class="text-muted-foreground mb-12 md:text-xl">{t('description')}</p>
        </div>
      </div>
      <div class:list={['mx-auto mb-8 space-y-6']}>
        <div class="flex flex-wrap items-center justify-center gap-2">
          <Link
            href={getRelativeLocaleUrl(currentLocale, `/certifications/`)}
            className={cn('h-10', {
              'bg-card dark:bg-card ring-accent ring-2':
                Astro.url.pathname.endsWith('/certifications'),
            })}
            variant={'outline'}
          >
            {t('allOrganizations')}
          </Link>
          <CertificationOrganizationsFilter orgs={orgs} />
        </div>
      </div>
      {
        certifications.length > 0 ? (
          <div class="grid grid-cols-3 gap-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 xl:grid-cols-7 2xl:grid-cols-8">
            {certifications.map((certification: CollectionEntry<'certifications'>, index) => (
              <CertificationCard certification={certification} index={index} />
            ))}
          </div>
        ) : (
          <p class="text-muted-foreground text-center">{t('noCertificationsFound')}</p>
        )
      }
    </div>
  </section>
</BaseLayout>

<style></style>
